root = meson.project_source_root()

# General tests
test('usage',                 fu, workdir: root, should_fail: true, args: ['-h'])
test('missing-file',          fu, workdir: root, should_fail: true, args: [])
test('invalid-option',        fu, workdir: root, should_fail: true, args: ['--flurp'])
test('missing-option-value',  fu, workdir: root, should_fail: true, args: ['--max-errors'])
test('non-existing-file',     fu, workdir: root, should_fail: true, args: ['this-file-hopefully-does-not-exist.fu'])
test('all-options-enabled',   fu, workdir: root, args: ['--max-errors', '3', '--no-color', '--print-ast', '--no-type-check', 'test/parser/pass/empty.fu'])

# Parser tests
test('pass-enums',     fu, suite: 'parser', workdir: root, args: ['--no-type-check', '--print-ast', 'test/parser/pass/enums.fu'])
test('pass-structs',   fu, suite: 'parser', workdir: root, args: ['--no-type-check', '--print-ast', 'test/parser/pass/structs.fu'])
test('pass-literals',  fu, suite: 'parser', workdir: root, args: ['--no-type-check', '--print-ast', 'test/parser/pass/literals.fu'])
test('pass-functions', fu, suite: 'parser', workdir: root, args: ['--no-type-check', '--print-ast', 'test/parser/pass/functions.fu'])
test('pass-exprs',     fu, suite: 'parser', workdir: root, args: ['--no-type-check', '--print-ast', 'test/parser/pass/exprs.fu'])
test('pass-loops',     fu, suite: 'parser', workdir: root, args: ['--no-type-check', '--print-ast', 'test/parser/pass/loops.fu'])
test('pass-attrs',     fu, suite: 'parser', workdir: root, args: ['--no-type-check', '--print-ast', 'test/parser/pass/attrs.fu'])
test('pass-structs',   fu, suite: 'parser', workdir: root, args: ['--no-type-check', '--print-ast', 'test/parser/pass/structs.fu'])
test('pass-literals',  fu, suite: 'parser', workdir: root, args: ['--no-type-check', '--print-ast', 'test/parser/pass/literals.fu'])
test('pass-functions', fu, suite: 'parser', workdir: root, args: ['--no-type-check', '--print-ast', 'test/parser/pass/functions.fu'])
test('pass-exprs',     fu, suite: 'parser', workdir: root, args: ['--no-type-check', '--print-ast', 'test/parser/pass/exprs.fu'])
test('pass-loops',     fu, suite: 'parser', workdir: root, args: ['--no-type-check', '--print-ast', 'test/parser/pass/loops.fu'])
test('pass-attrs',     fu, suite: 'parser', workdir: root, args: ['--no-type-check', '--print-ast', 'test/parser/pass/attrs.fu'])

test('fail-empty-type-params',  fu, suite: 'parser', workdir: root, should_fail: true, args: ['--no-type-check', '--print-ast', 'test/parser/fail/empty_enum.fu'])
test('fail-empty-enum',         fu, suite: 'parser', workdir: root, should_fail: true, args: ['--no-type-check', '--print-ast', 'test/parser/fail/empty_type_params.fu'])
test('fail-empty-enum-option',  fu, suite: 'parser', workdir: root, should_fail: true, args: ['--no-type-check', '--print-ast', 'test/parser/fail/empty_enum_option.fu'])
test('fail-empty-sig',          fu, suite: 'parser', workdir: root, should_fail: true, args: ['--no-type-check', '--print-ast', 'test/parser/fail/empty_sig.fu'])
test('fail-anon-sig',           fu, suite: 'parser', workdir: root, should_fail: true, args: ['--no-type-check', '--print-ast', 'test/parser/fail/anon_sig.fu'])
test('fail-missing-const-init', fu, suite: 'parser', workdir: root, should_fail: true, args: ['--no-type-check', '--print-ast', 'test/parser/fail/missing_const_init.fu'])
test('fail-unbound-type',       fu, suite: 'parser', workdir: root, should_fail: true, args: ['--no-type-check', '--print-ast', 'test/parser/fail/unbound_type.fu'])
test('fail-unbound-mod',        fu, suite: 'parser', workdir: root, should_fail: true, args: ['--no-type-check', '--print-ast', 'test/parser/fail/unbound_mod.fu'])
test('fail-val-in-mod',         fu, suite: 'parser', workdir: root, should_fail: true, args: ['--no-type-check', '--print-ast', 'test/parser/fail/val_in_mod.fu'])

# Typechecker tests
test('pass-structs',             fu, suite: 'typechecker', workdir: root, args: ['--print-ast', 'test/typechecker/pass/structs.fu'])
test('pass-enums',               fu, suite: 'typechecker', workdir: root, args: ['--print-ast', 'test/typechecker/pass/enums.fu'])
test('pass-parametric-structs',  fu, suite: 'typechecker', workdir: root, args: ['--print-ast', 'test/typechecker/pass/parametric_structs.fu'])
test('pass-parametric-enums',    fu, suite: 'typechecker', workdir: root, args: ['--print-ast', 'test/typechecker/pass/parametric_enums.fu'])
test('pass-tuple-like-structs',  fu, suite: 'typechecker', workdir: root, args: ['--print-ast', 'test/typechecker/pass/tuple_like_structs.fu'])
test('pass-struct-inheritance',  fu, suite: 'typechecker', workdir: root, args: ['--print-ast', 'test/typechecker/pass/struct_inheritance.fu'])
test('pass-enum-inheritance',    fu, suite: 'typechecker', workdir: root, args: ['--print-ast', 'test/typechecker/pass/enum_inheritance.fu'])
test('pass-pub-mod-members',     fu, suite: 'typechecker', workdir: root, args: ['--print-ast', 'test/typechecker/pass/pub_mod_members.fu'])
test('pass-opaque-mod-members',  fu, suite: 'typechecker', workdir: root, args: ['--print-ast', 'test/typechecker/pass/opaque_mod_members.fu'])
test('pass-parametric-mods',     fu, suite: 'typechecker', workdir: root, args: ['--print-ast', 'test/typechecker/pass/parametric_mods.fu'])
test('pass-polymorphic-fun',     fu, suite: 'typechecker', workdir: root, args: ['--print-ast', 'test/typechecker/pass/polymorphic_fun.fu'])
test('pass-polymorphic-mod-fun', fu, suite: 'typechecker', workdir: root, args: ['--print-ast', 'test/typechecker/pass/polymorphic_mod_fun.fu'])
test('pass-applied-mod-struct',  fu, suite: 'typechecker', workdir: root, args: ['--print-ast', 'test/typechecker/pass/applied_mod_struct.fu'])
test('pass-dependent-sig',       fu, suite: 'typechecker', workdir: root, args: ['--print-ast', 'test/typechecker/pass/dependent_sig.fu'])

test('fail-recursive-fun',       fu, suite: 'typechecker', workdir: root, should_fail: true, args: ['--print-ast', 'test/typechecker/fail/recursive_fun.fu'])
test('fail-type-access-enum',    fu, suite: 'typechecker', workdir: root, should_fail: true, args: ['--print-ast', 'test/typechecker/fail/type_access_enum.fu'])
test('fail-type-access-struct',  fu, suite: 'typechecker', workdir: root, should_fail: true, args: ['--print-ast', 'test/typechecker/fail/type_access_struct.fu'])
test('fail-value_access-struct', fu, suite: 'typechecker', workdir: root, should_fail: true, args: ['--print-ast', 'test/typechecker/fail/value_access_struct.fu'])
test('fail-bad-super-struct',    fu, suite: 'typechecker', workdir: root, should_fail: true, args: ['--print-ast', 'test/typechecker/fail/bad_super_struct.fu'])
test('fail-bad-sub-enum',        fu, suite: 'typechecker', workdir: root, should_fail: true, args: ['--print-ast', 'test/typechecker/fail/bad_sub_enum.fu'])
test('fail-hidden-mod-members',  fu, suite: 'typechecker', workdir: root, should_fail: true, args: ['--print-ast', 'test/typechecker/fail/hidden_mod_members.fu'])
test('fail-opaque-mod-members',  fu, suite: 'typechecker', workdir: root, should_fail: true, args: ['--print-ast', 'test/typechecker/fail/opaque_mod_members.fu'])
test('fail-missing-fun-body',    fu, suite: 'typechecker', workdir: root, should_fail: true, args: ['--print-ast', 'test/typechecker/fail/missing_fun_body.fu'])

test('fail-redecl-struct-field', fu, suite: 'typechecker', workdir: root, should_fail: true, args: ['--print-ast', 'test/typechecker/fail/redecl_struct_field.fu'])
test('fail-redecl-enum-option',  fu, suite: 'typechecker', workdir: root, should_fail: true, args: ['--print-ast', 'test/typechecker/fail/redecl_enum_option.fu'])
test('fail-rebind-where-clause', fu, suite: 'typechecker', workdir: root, should_fail: true, args: ['--print-ast', 'test/typechecker/fail/rebind_where_clause.fu'])

